# ARIA-SDR Docker Compose Configuration
# Agente de Relacionamento Inteligente da AR Online com integração Agno
# 
# Este arquivo define o serviço principal da API FastAPI que integra com:
# - Agno (interface conversacional)
# - OpenAI Assistants (processamento inteligente)
# - Supabase (RAG e armazenamento)
services:
  aria-sdr:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    environment:
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
      - API_LOG_LEVEL=${API_LOG_LEVEL:-info}
      - FASTAPI_BEARER_TOKEN=${FASTAPI_BEARER_TOKEN}
      - BEARER_TOKEN=${BEARER_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ASSISTANT_ID=${ASSISTANT_ID}
      - ASSISTANT_TIMEOUT_SECONDS=${ASSISTANT_TIMEOUT_SECONDS:-12}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-text-embedding-3-small}
      - EMBEDDING_DIM=${EMBEDDING_DIM:-1536}
      - RAG_ENABLE=${RAG_ENABLE:-true}
      - RAG_ENDPOINT=${RAG_ENDPOINT:-http://127.0.0.1:8000/rag/query}
      - RAG_DEFAULT_SOURCE=${RAG_DEFAULT_SOURCE:-faq}
      - VOLUME_ALTO_LIMIAR=${VOLUME_ALTO_LIMIAR:-1200}
      - AGNO_ROUTING_WEBHOOK=${AGNO_ROUTING_WEBHOOK}
      - AGNO_API_BASE_URL=${AGNO_API_BASE_URL}
      - AGNO_AUTH_TOKEN=${AGNO_AUTH_TOKEN}
      - AGNO_BOT_ID=${AGNO_BOT_ID}
    env_file:
      - .env
    volumes:
      - ./agno:/app/agno:ro
      - ./docs:/app/docs:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt
