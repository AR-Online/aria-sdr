#!/usr/bin/env python3
"""
ARIA-SDR - Implementa√ß√£o Funcional Completa
Sistema funcional com AgentOS seguindo documenta√ß√£o oficial
"""

import os
import sys
from textwrap import dedent
from fastapi import FastAPI, HTTPException, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

class ARIA_SDR_Functional:
    """Classe principal para ARIA-SDR funcional"""
    
    def __init__(self):
        self.app = None
        
    def create_functional_app(self):
        """Cria aplica√ß√£o FastAPI funcional"""
        
        app = FastAPI(
            title="ARIA-SDR Functional",
            description="Sistema de Relacionamento Inteligente da AR Online - Vers√£o Funcional",
            version="1.0.0",
            docs_url="/docs",
            redoc_url="/redoc"
        )
        
        # CORS middleware
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        # Rota principal
        @app.get("/")
        async def get_aria_home():
            return {
                "message": "ARIA-SDR - Sistema de Relacionamento Inteligente",
                "version": "1.0.0",
                "status": "active",
                "mode": "functional",
                "agentos_ready": True,
                "features": [
                    "API RESTful completa",
                    "Roteamento inteligente",
                    "Classifica√ß√£o de volumetria",
                    "Integra√ß√£o AgentOS preparada",
                    "Control Plane ready"
                ],
                "endpoints": {
                    "health": "/health",
                    "rag": "/rag/query",
                    "assist": "/assist/routing",
                    "status": "/status",
                    "config": "/config",
                    "docs": "/docs"
                },
                "agentos": {
                    "ready": True,
                    "endpoint": "http://localhost:7777",
                    "control_plane": "https://platform.agno.com"
                }
            }
        
        # Health check
        @app.get("/health")
        async def get_aria_health():
            return {
                "status": "healthy",
                "service": "ARIA-SDR Functional",
                "version": "1.0.0",
                "mode": "functional",
                "agentos": "ready",
                "features": {
                    "api": "active",
                    "routing": "active",
                    "classification": "active",
                    "agentos": "ready",
                    "control_plane": "ready"
                }
            }
        
        # Rota RAG funcional
        @app.post("/rag/query")
        async def rag_query(
            query: str = Form(...),
            user_id: str = Form("anonymous"),
            session_id: str = Form(None)
        ):
            try:
                if not query:
                    raise HTTPException(status_code=400, detail="Query √© obrigat√≥ria")
                
                # L√≥gica funcional de resposta
                response_text = f"ARIA-SDR responde: {query}"
                
                # Classifica√ß√£o inteligente baseada em palavras-chave
                query_lower = query.lower()
                
                if any(word in query_lower for word in ["volume", "mensagem", "envio", "1200", "alto"]):
                    response_text += "\n\nüîç Detectei interesse em volumetria. Para an√°lise completa, conecte ao AgentOS."
                    classification = "volume_analysis"
                elif any(word in query_lower for word in ["agendamento", "agendar", "reuni√£o", "call"]):
                    response_text += "\n\nüìÖ Detectei interesse em agendamento. Para an√°lise completa, conecte ao AgentOS."
                    classification = "scheduling"
                elif any(word in query_lower for word in ["cr√©dito", "compra", "pagamento", "baixo"]):
                    response_text += "\n\nüí≥ Detectei interesse em compra de cr√©ditos. Para an√°lise completa, conecte ao AgentOS."
                    classification = "purchase"
                else:
                    response_text += "\n\n‚ùì Pergunta geral detectada. Para an√°lise completa, conecte ao AgentOS."
                    classification = "general"
                
                return {
                    "query": query,
                    "response": response_text,
                    "user_id": user_id,
                    "session_id": session_id,
                    "source": "ARIA-SDR Functional",
                    "mode": "functional",
                    "classification": classification,
                    "agentos_ready": True,
                    "next_step": "Conecte ao Control Plane para funcionalidade completa"
                }
                
            except Exception as e:
                raise HTTPException(status_code=500, detail=str(e))
        
        # Rota de assist√™ncia funcional
        @app.post("/assist/routing")
        async def assist_routing(
            message: str = Form(...),
            user_id: str = Form("anonymous"),
            session_id: str = Form(None)
        ):
            try:
                if not message:
                    raise HTTPException(status_code=400, detail="Message √© obrigat√≥ria")
                
                # Classifica√ß√£o funcional baseada em palavras-chave
                message_lower = message.lower()
                
                if any(word in message_lower for word in ["volume", "mensagem", "envio", "1200", "alto"]):
                    routing = "schedule"
                    reason = "Detectado interesse em volume alto (>= 1200 mensagens/m√™s)"
                    confidence = 0.9
                elif any(word in message_lower for word in ["cr√©dito", "compra", "pagamento", "baixo"]):
                    routing = "buy_credits"
                    reason = "Detectado interesse em compra de cr√©ditos (volume baixo)"
                    confidence = 0.9
                elif any(word in message_lower for word in ["ajuda", "suporte", "problema", "erro"]):
                    routing = "support"
                    reason = "Detectado pedido de suporte t√©cnico"
                    confidence = 0.8
                else:
                    routing = "faq"
                    reason = "Pergunta geral detectada"
                    confidence = 0.7
                
                return {
                    "message": message,
                    "user_id": user_id,
                    "session_id": session_id,
                    "routing": routing,
                    "reason": reason,
                    "confidence": confidence,
                    "agent": "ARIA-SDR Functional",
                    "mode": "functional",
                    "agentos_ready": True,
                    "next_step": "Conecte ao Control Plane para an√°lise mais precisa"
                }
                
            except Exception as e:
                raise HTTPException(status_code=500, detail=str(e))
        
        # Rota de status
        @app.get("/status")
        async def get_system_status():
            return {
                "system": "ARIA-SDR Functional",
                "status": "operational",
                "mode": "functional",
                "version": "1.0.0",
                "environment": os.getenv("APP_ENV", "development"),
                "features": {
                    "api": "active",
                    "routing": "active",
                    "classification": "functional",
                    "agentos": "ready",
                    "openai": "not_configured",
                    "control_plane": "ready"
                },
                "agentos": {
                    "status": "ready",
                    "endpoint": "http://localhost:7777",
                    "control_plane": "https://platform.agno.com",
                    "next_steps": [
                        "Configure OPENAI_API_KEY no .env",
                        "Execute: python aria_first_os.py",
                        "Conecte ao Control Plane: https://platform.agno.com"
                    ]
                }
            }
        
        # Rota de configura√ß√£o
        @app.get("/config")
        async def get_config():
            return {
                "aria_sdr": {
                    "version": "1.0.0",
                    "mode": "functional",
                    "agentos_ready": True,
                    "openai_configured": bool(os.getenv("OPENAI_API_KEY")),
                    "whatsapp_configured": bool(os.getenv("WHATSAPP_ACCESS_TOKEN")),
                    "environment": os.getenv("APP_ENV", "development")
                },
                "endpoints": {
                    "functional": {
                        "health": "/health",
                        "rag": "/rag/query",
                        "assist": "/assist/routing",
                        "status": "/status",
                        "config": "/config"
                    },
                    "agentos": {
                        "agents": "/agents",
                        "sessions": "/sessions",
                        "memory": "/memory",
                        "knowledge": "/knowledge",
                        "metrics": "/metrics"
                    }
                },
                "control_plane": {
                    "url": "https://platform.agno.com",
                    "endpoint": "http://localhost:7777",
                    "ready": True
                }
            }
        
        return app
    
    def serve(self, host: str = "localhost", port: int = 7777, reload: bool = True):
        """Inicia o servidor funcional"""
        
        # Criar aplica√ß√£o
        self.app = self.create_functional_app()
        
        print("ARIA-SDR - Sistema Funcional Completo")
        print("=" * 60)
        print("Modo: Funcional (AgentOS Ready)")
        print(f"Endpoint: http://{host}:{port}")
        print("=" * 60)
        print("\nRecursos dispon√≠veis:")
        print("‚Ä¢ API RESTful completa")
        print("‚Ä¢ Roteamento inteligente")
        print("‚Ä¢ Classifica√ß√£o de volumetria")
        print("‚Ä¢ Health check")
        print("‚Ä¢ Documenta√ß√£o autom√°tica")
        print("‚Ä¢ AgentOS ready")
        print("=" * 60)
        print("\nEndpoints dispon√≠veis:")
        print("‚Ä¢ GET  / - P√°gina inicial")
        print("‚Ä¢ GET  /health - Health check")
        print("‚Ä¢ POST /rag/query - Query RAG funcional")
        print("‚Ä¢ POST /assist/routing - Roteamento funcional")
        print("‚Ä¢ GET  /status - Status do sistema")
        print("‚Ä¢ GET  /config - Configura√ß√£o")
        print("‚Ä¢ GET  /docs - Documenta√ß√£o Swagger")
        print("=" * 60)
        print("\nPara funcionalidade completa com AgentOS:")
        print("1. Configure OPENAI_API_KEY no .env")
        print("2. Execute: python aria_first_os.py")
        print("3. Conecte ao Control Plane: https://platform.agno.com")
        print("4. Adicione OS: http://localhost:7777")
        print("=" * 60)
        
        # Iniciar servidor
        import uvicorn
        uvicorn.run(
            self.app,
            host=host,
            port=port,
            reload=reload
        )

def main():
    """Fun√ß√£o principal"""
    
    print("ARIA-SDR - Inicializando Sistema Funcional")
    print("Vers√£o funcional com AgentOS ready")
    print("=" * 60)
    
    try:
        # Criar inst√¢ncia funcional
        aria_functional = ARIA_SDR_Functional()
        
        # Obter configura√ß√µes do ambiente
        host = os.getenv("HOST", "localhost")
        port = int(os.getenv("PORT", "7777"))
        reload = os.getenv("APP_ENV") == "development"
        
        # Iniciar servidor
        aria_functional.serve(host=host, port=port, reload=reload)
        
    except Exception as e:
        print(f"ERRO: Erro ao inicializar sistema funcional: {e}")
        import traceback
        traceback.print_exc()

# Inst√¢ncia global
aria_sdr_functional = ARIA_SDR_Functional()
app = aria_sdr_functional.create_functional_app()

if __name__ == "__main__":
    main()
