{
  "name": "RAG + Assist (Webhook→Embeddings→Supabase→Assistant)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "rag-assist",
        "responseMode": "responseNode"
      },
      "id": "Webhook_1",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300],
      "webhookId": "rag-assist-hook"
    },
    {
      "parameters": {
        "functionCode": "const body = $json.body ?? $json;\nconst text = (body.text ?? body.question ?? '').toString().trim();\nconst channel = body.channel ?? 'n8n';\nconst metadata = body.metadata ?? {};\nconst t = text.toLowerCase();\nconst NEED_KWS = ['como','funciona','preço','prazo','qual','o que é','como faço'];\nconst need_rag = metadata.faq_mode === true || NEED_KWS.some(k => t.includes(k));\nreturn [{ text, channel, metadata, need_rag }];"
      },
      "id": "Function_Normalize",
      "name": "Function (normalize/need_rag)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [470, 300]
    },
    {
      "parameters": {
        "resource": "embeddings",
        "operation": "create",
        "model": "text-embedding-3-small",
        "input": "={{$json['text']}}"
      },
      "id": "OpenAI_Embeddings",
      "name": "OpenAI Embeddings",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 2,
      "position": [740, 300],
      "credentials": {
        "openAiApi": {
          "id": "__SET_YOUR_OPENAI_CREDENTIAL_ID__",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "={{$env.SUPABASE_URL}}/rest/v1/rpc/match_aria_chunks",
        "jsonParameters": true,
        "options": {
          "response": {
            "fullResponse": true
          }
        },
        "headerParametersJson": "={{ { apikey: $env.SUPABASE_SERVICE_ROLE_KEY, Authorization: 'Bearer ' + $env.SUPABASE_SERVICE_ROLE_KEY, 'Content-Type': 'application/json' } }}",
        "bodyParametersJson": "={{ { query_embedding: $json.data[0].embedding, match_count: 5, filter_source: 'faq' } }}"
      },
      "id": "Supabase_RPC",
      "name": "Supabase RPC (match_aria_chunks)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1010, 300]
    },
    {
      "parameters": {
        "functionCode": "// Junta hits em um único contexto e carrega dados do nó de normalize\nconst hits = ($json.body ?? []);\nconst norm = $item(0).$node['Function (normalize/need_rag)'].json;\nconst retrieval_context = hits.map((h, i) => `[$${i+1}] $${h.content}`).join('\n\n');\nreturn [{\n  text: norm.text,\n  channel: norm.channel,\n  metadata: norm.metadata,\n  need_rag: norm.need_rag,\n  hits,\n  retrieval_context\n}];"
      },
      "id": "Function_BuildContext",
      "name": "Function (monta retrieval_context)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1280, 300]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "POST",
        "url": "={{$env.ASSIST_API_URL || 'http://127.0.0.1:8000/assist/routing'}}",
        "jsonParameters": true,
        "options": {
          "response": {
            "fullResponse": true
          }
        },
        "headerParametersJson": "={{ { Authorization: 'Bearer ' + ($env.FASTAPI_BEARER_TOKEN || 'realizati'), 'Content-Type': 'application/json' } }}",
        "bodyParametersJson": "={{ { text: $json.text, channel: $json.channel, thread_id: null, metadata: { faq_mode: $json.need_rag, retrieval_context: $json.retrieval_context } } }}"
      },
      "id": "Assistant_API",
      "name": "HTTP Request (sua API/Assistant)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1550, 300]
    },
    {
      "parameters": {
        "responseBody": "={{$json.body}}",
        "responseCode": 200,
        "responseData": "json"
      },
      "id": "Respond",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1820, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Function (normalize/need_rag)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function (normalize/need_rag)": {
      "main": [
        [
          {
            "node": "OpenAI Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Embeddings": {
      "main": [
        [
          {
            "node": "Supabase RPC (match_aria_chunks)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase RPC (match_aria_chunks)": {
      "main": [
        [
          {
            "node": "Function (monta retrieval_context)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function (monta retrieval_context)": {
      "main": [
        [
          {
            "node": "HTTP Request (sua API/Assistant)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request (sua API/Assistant)": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "generated"
  },
  "settings": {
    "saveExecutionProgress": "DEFAULT"
  },
  "staticData": null
}
